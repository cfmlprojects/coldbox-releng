<project name="distro.build" default="build" basedir="./" xmlns:antcontrib="antlib:net.sf.antcontrib">

	<loadproperties srcfile="build.properties"/>
	<import file="${cfdistro.build.file}"/>
	<property name="coldbox.src.dir" location="${src.dir}/coldbox" />

	<target name="coldbox.getversion">
		<tstamp prefix="start"/>
		<property name="build.number" value="${start.DSTAMP}${start.TSTAMP}"/>
		<loadfile srcFile="${src.dir}/coldbox/system/web/config/Settings.cfc" property="coldbox.version"/>
		<antcontrib:propertyregex override="yes" property="coldbox.version" input="${coldbox.version}" 
			regexp=".*?this.version\s+?=\s+?&quot;([^&quot;]+).*?" select="\1" />
    <!-- 
		<antcontrib:propertyregex override="yes" property="coldbox.version" input="${coldbox.version}" 
			regexp="@build.number@" replace="${build.number}" />
     -->
		<antcontrib:propertyregex override="yes" property="coldbox.version" input="${coldbox.version}" 
			regexp="\+@build.number@" replace="" />
		<echo message="ColdBox Version: ${coldbox.version}" />
	</target>

	<target name="build" depends="cfdistro.build">
		<mapping physical="@src.dir@/coldbox" virtual="/coldbox"/>
	</target>

	<target name="test">
    <dependency artifactId="testbox" groupId="org.coldbox" version="1.1.0" mapping="/testbox" />
		<server-run> 
		<!--
			<get
				src="http://${server.host}:${server.port.http}/coldbox/testharness/index.cfm"
				retries="3" ignoreerrors="true"
				dest="${temp.dir}/firedUpNowDelMe.html" />
				-->
			<testbox-rundirs basePath="${src.dir}/tests/specs/" componentPath="coldbox.tests.specs" outputdir="${dist.dir}/testresults/"/>
		</server-run>
	</target>

	<target name="build.test" depends="build">
		<!-- temporarily turn off secondary cache as railo has a bug
		 -->
		<replaceregexp file="${src.dir}/coldbox/testing/Application.cfc" match="secondarycacheenabled = true" replace="secondarycacheenabled = false" byline="false" flags="g,s"/>
    <dependency artifactId="testbox" groupId="org.coldbox" version="1.1.0" mapping="/testbox" />
		<dependency groupId="org.coldspringframework" artifactId="coldspring" version="1.2" mapping="/coldspring" />
		<copy todir="${war.target.dir}">
			<fileset dir="${src.dir}/coldbox/testharness/" />
		</copy>
		<railo-cache name="def-obj" class="railo.runtime.cache.eh.EHCache" storage="true" 
			default-type="default-object"
	    	custom="${cache.props}"/>

		<railo-cache name="def-tmpl" class="railo.runtime.cache.eh.EHCache" storage="true" 
			default-type="default-template"
	    	custom="${cache.props}"/>

		<railo-cache name="def-qry" class="railo.runtime.cache.eh.EHCache" storage="true" 
			default-type="default-query"
	    	custom="${cache.props}"/>

		<server-run> 
		<!--
			<get
				src="http://${server.host}:${server.port.http}/coldbox/testharness/index.cfm"
				retries="3" ignoreerrors="true"
				dest="${temp.dir}/firedUpNowDelMe.html" />
				-->
			<testbox-rundirs basePath="${src.dir}/coldbox/tests/specs/" componentPath="coldbox.tests.specs" outputdir="${dist.dir}/testresults/"/>
		</server-run>
	</target>

  <target name="build.doc" depends="build.test">
    <delete dir="${temp.dir}/apidocs" />
    <delete dir="${dist.dir}/coldbox-doc_${coldbox.version}.zip" />
    <mkdir dir="${temp.dir}/apidocs" />
    <abspath path="${temp.dir}" property="temp.dir"/>
    <colddoc packagenames="coldbox"
      sourcepath="${temp.dir}/coldbox/" destdir="${temp.dir}/apidocs"
      title="coldbox ${coldbox.version}" />
    <zip destfile="${dist.dir}/coldbox-doc_${coldbox.version}.zip" basedir="${temp.dir}/apidocs"></zip>
  </target>

  <target name="build.mvn.release" depends="project.update, build.test, coldbox.getversion">
    <property name="mvn.repo.dest" value="local" />
    <property name="mvn.repo.dest" value="remote" />
    <property name="mvn.repo.id" value="mvn.repo.${mvn.repo.dest}" />
    <property name="maven.repo.local" location="${cfdistro.basedir}/artifacts" />
	  <mvn-repo id="mvn.repo.local" url="file://${maven.repo.local}/" />
   	<property name="mvn.type" value="release" />
   	<property name="cb.tmp" location="${temp.dir}/cb" />
   	<property name="cb.zip.tmp" location="${temp.dir}/cb/zips" />
    <delete dir="${cb.tmp}" />
    <mkdir dir="${cb.zip.tmp}"/>

    <!-- Copy Src --> 
    <copy todir="${cb.tmp}/system" encoding="UTF-8">
      <fileset dir="system">
      </fileset>
    </copy>

    <!-- Move Install folder -->
    <copy todir="${cb.tmp}/install" encoding="UTF-8">
      <fileset dir="install">
        <exclude name="ColdboxCheatSheet.*" />
      </fileset>
    </copy>
    
    <!--AppTemplate-->
    <copy todir="${cb.tmp}/ApplicationTemplates" encoding="UTF-8">
      <fileset dir="ApplicationTemplates" />
    </copy>
    
    <!--Copy text files to install folder-->
    <copy todir="${cb.tmp}" encoding="UTF-8">
      <fileset file="license.txt" />
      <fileset file="readme.md" />            
    </copy>
    
    <!-- Copy box.json to build -->
    <copy file="box.json" toFile="${cb.tmp}/box.json" encoding="UTF-8"/>
    
    <!-- Replace Build Numbers -->
    <replaceregexp match='@build.number@' replace="${build.number}" flags="ig" byline="true" encoding="UTF-8">
      <fileset dir="${cb.tmp}" />
    </replaceregexp>
    
    <!-- Execute IDE Dictionaries -->
    <get dest="${cb.tmp}/install/IDE Extras/CFBuilder Dictionary/coldbox.builder.xml" src="${url.dictionaries}/builderDictionary.cfm?text=true" verbose="true"/>

    <!-- Execute Api Docs -->
    <get dest="${cb.tmp}/colddoc.html" src="${url.coldbox.api}${coldbox.version}&amp;path=${cb.tmp}/apidocs&amp;coldbox_root=${cb.tmp}/coldbox" verbose="true"/>
    <delete file="${cb.tmp}/colddoc.html" />
    
    <!-- Zip API Docs -->
    <zip destfile="${cb.zip.tmp}/coldbox-apidocs-${coldbox.version}.zip" basedir="${cb.tmp}/apidocs" />

    <!-- Zip IDE Extras -->
    <zip destfile="${cb.zip.tmp}/coldbox-ide-${coldbox.version}.zip" basedir="${cb.tmp}/install/IDE Extras" />
    
    <!-- Zip ColdBox Bundle -->
    <zip destfile="${cb.zip.tmp}/coldbox-${coldbox.version}.zip" basedir="${cb.tmp}" />
    
    <!-- Cleanup for StandAlone Build -->
    <delete dir="${cb.tmp}/ApplicationTemplates"/>
    <delete dir="${cb.tmp}/apidocs" />
    <delete dir="${cb.tmp}/test-runner" />
    <delete dir="${cb.tmp}/test-browser" />
    <delete dir="${cb.tmp}/install" />
    
    <!-- Zip Standalone -->
    <zip destfile="${cb.zip.tmp}/coldbox-standalone-${coldbox.version}.zip" basedir="${cb.tmp}" />
    
    <!-- Build Checksum -->
    <checksum forceoverwrite="true" fileext=".md5">
      <fileset dir="${cb.zip.tmp}">
        <include name="*.zip" />
      </fileset>
    </checksum>


   	<delete file="${dist.dir}/coldbox.zip" />
   	<delete file="${dist.dir}/coldbox-all.zip" />
		<zip destfile="${dist.dir}/coldbox.zip" basedir="${src.dir}/coldbox/" 
			excludes="testing/** testharness/** ApplicationTemplates/** install/** ant/**" />
		<zip destfile="${dist.dir}/coldbox-all.zip" basedir="${src.dir}/coldbox/"/>

		<pom-and-deploy pomid="coldbox.pom" packaging="zip" artifact="${dist.dir}/coldbox.zip"
		 groupId="org.coldbox" artifactId="coldbox" version="${coldbox.version}" name="coldbox"/>
		<pom-and-deploy pomid="coldbox-all.pom" packaging="zip" artifact="${dist.dir}/coldbox-all.zip"
		 groupId="org.coldbox" artifactId="coldbox-all" version="${coldbox.version}" name="coldbox-all"/>
		
	 	<!--  create an extension -->
		<delete dir="${basedir}/extensionbase/" />
		<mkdir dir="${basedir}/extensionbase/" />
		<copy todir="${basedir}/extensionbase/applications/coldbox">
			<fileset dir="${src.dir}/coldbox" />
		</copy>
		<antcontrib:runtarget target="extension.build" />
		<delete dir="${basedir}/extensionbase/" />
	
    <!-- add the extension as well -->
		<mvn-put artifact="${extension.dist}/${extension.archive}"
			packaging="zip" repoId="${mvn.repo.id}" groupId="cfml.extensions"
			artifactId="coldbox" version="${extension.version}" />

	</target>

		
</project>
